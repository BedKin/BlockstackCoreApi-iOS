//
//  TokenSigner.swift
//  BlockstackCoreApi
//
//  Created by lsease on 7/13/17.
//

import Foundation

public class TokenSigner
{
    public static func signUnsecured(requestData : [String : Any]) -> String?
    {
        //TODO: Implement
        if let jsonString = requestData.jsonString()
        {
            return jsonString.base64Encoded()
        }
        
        return nil
    }
    
    
    
    public static func sign(requestData : [String : Any], privateKey : String) -> String?
    {
        //TODO: Implement
        //using signing algorithm ES256k
        //create a header with {typ: 'JWT', alg: 'ES256k'}
        //signing input = base64 encoded string representation of header
        //base64 encoded version of the payload
        //separated by a .
        //the last part of the token is a signature generated by:
        //creating a hash of the signing input
        //and signing the hash with the private key
        
        
        if let jsonString = requestData.jsonString()
        {
            return jsonString.base64Encoded()
        }
        
        return nil
    }
    
    public static func decode(responseData : String, privateKey: String) -> [String : Any]?
    {
        //TODO: Implement
        //break the string into 3 parts separated by a .
        //base64 decode the header, part 0
        //base64 decode the payload, part 1
        //the 3rd part is the signature
        if let decodedString = responseData.base64Decoded()
        {
            return decodedString.toJsonDictionary()
        }
        return nil
    }
    
    public static func decodeUnsecured(responseData : String) -> [String : Any]?
    {
        //TODO: Implement
        //break the string into 3 parts separated by a .
        //base64 decode the header, part 0
        //base64 decode the payload, part 1
        //the 3rd part is the signature
        
        if let decodedString = responseData.base64Decoded()
        {
            return decodedString.toJsonDictionary()
        }
        return nil
    }
}
